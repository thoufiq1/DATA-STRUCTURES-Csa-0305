#include <stdio.h>
#define MAX 30

typedef struct {
    int u, v, w;
} Edge;

Edge edges[MAX];
int parent[MAX];

int find(int i) {
    while (parent[i] != i) i = parent[i];
    return i;
}

void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskal(int n, int e) {
    Edge temp;
    // Sort edges by weight (simple bubble sort)
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (edges[j].w > edges[j + 1].w) {
                temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }

    for (int i = 0; i < n; i++) parent[i] = i;

    printf("Edges in Minimum Spanning Tree:\n");
    int count = 0, i = 0;
    while (count < n - 1 && i < e) {
        int u = edges[i].u;
        int v = edges[i].v;
        if (find(u) != find(v)) {
            printf("%d - %d : %d\n", u, v, edges[i].w);
            unionSet(u, v);
            count++;
        }
        i++;
    }
}

int main() {
    int n, e;
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &n, &e);

    printf("Enter edges (u v w):\n");
    for (int i = 0; i < e; i++)
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);

    kruskal(n, e);
    return 0;
}
